/*
  This file contains the common code that is found across the
  hook functions and resolvers found in the 'src' directory.
*/

// Constants

/*
  This number determines the amount of votes required for the
  post to be deleted by the automatic post management system.
*/
export const VOTE_COUNT_TO_DELETE_POST = -1

// Functions

/*
  A wrapper around the fromEvent(event).request that is provided
  by 'graphcool-lib' to handle errors in query responses.
*/
export const makeRequest = async (api, query, variables) => {
  const queryResult = await api.request(query, variables)

  if (queryResult.error) {
    return Promise.reject(queryResult.error)
  } else {
    return queryResult
  }
}

/*
  Currently, the CRUD API generated by graphcool does not expose a
  query that allows you to update or delete multiple data records at
  once.
  
  It looks like this feature is coming in the graphcool 1.0 release.
  https://github.com/graphcool/framework/issues/81

  In the meantime, this function will be used to delete all the Votes
  on a Post record. This is required because graphcool doesn't allow
  you to delete records that would leave other records orphans.

  In the case of the Post type, if it was deleted, it would leave the
  Vote records that reference the Post, orphans. To allow us to delete
  a post, we must first delete the Votes that reference it.
*/
export const deleteAllVotesOnPost = async (api, postId) => {
  const { allVotes } = await makeRequest(api, getAllVoteIdsOnPost, { postId })
  const voteIdList = allVotes.map(vote => vote.id)

  return await Promise.all(
    voteIdList.map(voteId => {
      return makeRequest(api, deleteVote, { voteId })
    })
  )
}

// GraphQL Queries

export const postIdFromVoteQuery = `
query getPostIdFromVote($voteId: ID!) {
  Vote(id: $voteId) {
    post {
      id
    }
  }
}
`
export const currentPostVoteCount = `
query getCurrentPostVoteCount($postId: ID!) {
  Post(id: $postId) {
    voteCount
  }
}
`
export const getAllVoteIdsOnPost = `
query getAllVoteIdsOnPost($postId: ID!) {
  allVotes(filter: { post: { id: $postId }}) {
    id
  }
}
`

// GraphQL Mutations

export const deleteVote = `
mutation deletePost($voteId: ID!) {
  deleteVote(id: $voteId) {
    id
  }
}
`
export const deletePost = `
mutation deletePost($postId: ID!) {
  deletePost(id: $postId) {
    voteCount
  }
}
`
export const updatePost = `
mutation updatePost($postId: ID!, $newVoteCount: Int!) {
  updatePost(id: $postId, voteCount: $newVoteCount) {
    voteCount
  }
}
`
