# Specify the schema for Corum
types: ./types.graphql

functions:
  # Resolvers
  # 'signupUser' Mutation Resolver
  signup:
    type: resolver
    schema: src/user/signup.graphql
    handler:
      code:
        src: src/user/signup.js

  # 'authenticateUser' Mutation Resolver
  authenticate:
    type: resolver
    schema: src/user/authenticate.graphql
    handler:
      code:
        src: src/user/authenticate.js

  # Hook functions
  # Initialises 'voteCount' to 0 on a new post
  initVoteCount:
    type: operationBefore
    operation: Post.create
    handler:
      code: 
        src: src/post/initVoteCount.js

  # Ensures that a user cannot vote on a post more that once
  userAndPostIsUniqueOnVote:
    type: operationBefore
    operation: Vote.create
    handler:
      code:
        src: src/vote/userAndPostIsUnique.js

  # Updates the post's voteCount field on 'Vote' creation
  updatePostVoteCountOnVoteCreation:
    type: operationAfter
    operation: Vote.create
    handler:
      code: 
        src: src/post/updateVoteCountOnVoteCreation.js
  
  # Updates the post's voteCount field on 'Vote' update
  updatePostVoteCountOnVoteUpdate:
    type: operationAfter
    operation: Vote.update
    handler:
      code: 
        src: src/post/updateVoteCountOnVoteUpdate.js

  # Updates the post's voteCount field on 'Vote' deletion
  updatePostVoteCountOnVoteDeletion:
   type: operationBefore
   operation: Vote.delete
   handler:
     code: 
       src: src/post/updateVoteCountOnVoteDeletion.js

rootTokens:
  - signup
  - authenticate
  - updatePostVoteCountOnVoteCreation
  - updatePostVoteCountOnVoteUpdate
  - updatePostVoteCountOnVoteDeletion

# Where 'authenticated: true' is present in an operation,
# the client must pass along their JWT auth token in the
# request headers. (In the form -> Authorization: 'Bearer ${TOKEN}')

permissions:
  # Subforum Permissions
  - operation: Subforum.create # Temp so admin can create
    authenticated: true
  - operation: Subforum.read

  # Post Permissions
  - operation: Post.create
    authenticated: true
  - operation: Post.read

  # Allows access to User from Post
  - operation: User.read
    # Only the username field is made queryable. This means
    # that malicious users cannot query for someones elses
    # infomation such as their password, id, or email.
    fields: [username]

  # Comment Permissions
  - operation: Comment.create
    authenticated: true
  - operation: Comment.read

  # Vote Permissions
  - operation: Vote.create
    authenticated: true
  - operation: Vote.read
  - operation: Vote.update
    authenticated: true
  - operation: Vote.delete
    authenticated: true

  # Relation Permissions
  - operation: SubforumToPost.connect
    authenticated: true
  - operation: PostToComment.connect  
    authenticated: true
  - operation: UserToPost.connect
    authenticated: true
  - operation: UserToVote.connect
    authenticated: true
  - operation: PostToVote.connect
    authenticated: true
